FROM python:3.10.9-slim

# Prevents python from writing .pyc (compiled byte) codes to disk
ENV PYTHONDONTWRITEBYTECODE 1

# Forces python outputs to be sent straight to terminal, without buffering
ENV PYTHONUNBUFFERED 1

# Indicates whether it's in production or local environment and if it's testing
ENV ENVIRONMENT prod
ENV TESTING 0

RUN apt-get update \
    apt-get upgrade \
    && apt-get install -y wget curl

# Install dockerize to ensure availability of container dependencies
ENV DOCKERIZE_VERSION v0.6.1
RUN wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
    && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
    && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz

# Install poetry
ENV POETRY_VIRTUALENVS_IN_PROJECT false
ENV POETRY_NO_INTERACTION 1
RUN curl -sSL https://install.python-poetry.org | POETRY_HOME=/opt/poetry python3 - \
    && cd /usr/local/bin \
    && ln -s /opt/poetry/bin/poetry

# Add non-root user
RUN useradd -ms /bin/bash userprod
USER userprod

WORKDIR /home/userprod/app

COPY src/ .
COPY pyproject.toml .
COPY poetry.lock .
COPY .env .

# Install dependencies
ARG INSTALL_DEV=false
RUN bash -c "if [ $INSTALL_DEV == 'true' ] ; then poetry install --no-root ; \
    else poetry install --no-root --without dev ; fi"

EXPOSE 8000

CMD ["python", "-m", "src.infrastructure.http.main"]